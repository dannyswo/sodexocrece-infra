/**
 * Template: shared/main-shared
 * Modules:
 * - IAM: users-rbac-module, managed-identities-module, managed-identities-rbac-module, keyvault-rbac-module
 * - Network: keyvault-private-endpoint-module, service-endpoint-policies-module
 * - Security: keyvault-module, keyvault-objects-module, keyvault-policies-module
 * - Storage: monitoring-storage-account-module, monitoring-storage-account-containers-module
 * - Monitoring: monitoring-loganalytics-workspace-module, flowlogs-module, flowlogs-nsg-module
 */

// ==================================== Parameters ====================================

// ==================================== Common parameters ====================================

@description('Azure region.')
param location string = resourceGroup().location

@description('Environment code.')
@allowed([
  'SWO'
  'DEV'
  'UAT'
  'PRD'
])
param env string

@description('Standard tags applied to all resources.')
@metadata({
  ApplicationName: 'ApplicationName'
  ApplicationOwner: 'ApplicationOwner'
  ApplicationSponsor: 'ApplicationSponsor'
  TechnicalContact: 'TechnicalContact'
  Maintenance: '{ ... } (maintenance standard JSON)'
  EnvironmentType: 'DEV | UAT | PRD'
  Security: '{ ... } (security standard JSON generated in Palantir)'
  DeploymentDate: 'YYY-MM-DDTHHMM UTC (autogenatered)'
  AllowShutdown: 'True (for non-prod environments), False (for prod environments)'
  dd_organization: 'MX (only for prod environments)'
  Env: 'dev | uat | prd'
  stack: 'Crececonsdx'
})
param standardTags object = resourceGroup().tags

// ==================================== Network dependencies ====================================

@description('Name of the Gateway VNet.')
param gatewayVNetName string

@description('Name of the Applications VNet.')
param appsVNetName string

@description('Name of the Endpoints VNet.')
param endpointsVNetName string

@description('Name of the Endpoints Subnet.')
param endpointsSubnetName string

@description('Name of the Jump Servers VNet.')
param jumpServersVNetName string

@description('Name of the DevOps Agents VNet.')
param devopsAgentsVNetName string

@description('Name of the NSG attached to Applications Subnet.')
param appsNSGName string

// ==================================== Private Endpoints settings ====================================

@description('Private IP address of Private Endpoint used by infrastructure Key Vault.')
param infraKeyVaultPEPrivateIPAddress string

// ==================================== Resource properties ====================================

@description('Suffix used in the monitoring data Storage Account name.')
@minLength(6)
@maxLength(6)
param monitoringDataStorageNameSuffix string
@description('SKU name of the monitoring data Storage Account.')
@allowed([
  'Standard_LRS'
  'Standard_ZRS'
])
param monitoringDataStorageSkuName string

@description('SKU name of the monitoring Workspace.')
@allowed([
  'PerGB2018'
  'CapacityReservation'
])
param monitoringWorkspaceSkuName string
@description('Capacity reservation in GBs for the monitoring Workspace.')
param monitoringWorkspaceCapacityReservation int
@description('Retention days of logs managed by monitoring Workspace.')
param monitoringWorkspaceLogRetentionDays int

@description('Suffix used in the infastructure Key Vault name.')
@minLength(6)
@maxLength(6)
param infraKeyVaultNameSuffix string
@description('Enable purge protection feature of the infrastructure Key Vault.')
param infraKeyVaultEnablePurgeProtection bool
@description('Retention days of soft-deleted objects in the infrastructure Key Vault.')
param infraKeyVaultSoftDeleteRetentionDays int
@description('Enable ARM to access objects in the infrastructure Key Vault.')
param infraKeyVaultEnableArmAccess bool
@description('Enable RBAC authorization in infrastructure Key Vault and ignore access policies.')
param infraKeyVaultEnableRbacAuthorization bool

@description('Create Encryption Keys in infrastructure Key Vault.')
param createEncryptionKeysInKeyVault bool
@description('Issue datetime of the generated Encryption Keys.')
param encryptionKeysIssueDateTime string
@description('Create Secrets in infrastructure Key Vault.')
param createSecretsInKeyVault bool
@description('Enable random password generation for Secrets.')
param enableRandomPasswordGenerationForSecrets bool
@secure()
param secrtsSqlDatabaseSqlAdminLoginName string
@description('Value of the sqlAdminLoginPass Secret. Optional, can be autogenerated.')
@secure()
param secrtsSqlDatabaseSqlAdminLoginPass string
@description('Issue datetime of the generated Secrets.')
param secrtsIssueDateTime string
@description('Principal IDs of the system administrator users.')
param adminUsersPrincipalIds array
@description('Principal IDs of the developer users.')
param devUsersPrincipalIds array
@description('Principal IDs of Azure services with Key Vault access.')
param azureServicesPrincipalIds array
@description('Principal ID of the DevOps Agent AD Identity.')
param devopsAgentPrincipalId string

@description('Enable Network Watcher Flow Analytics feature. Must be enabled in the Subscription.')
param flowLogsEnableNetworkWatcherFlowAnalytics bool
@description('Retention days of flow logs captured by the Network Watcher.')
param flowLogsRetentionDays int

// ==================================== Diagnostics options ====================================

@description('Enable diagnostics to store infrastructure Key Vault audit logs.')
param infraKeyVaultEnableDiagnostics bool
@description('Retention days of the infrastructure Key Vault audit logs. Must be defined if enableDiagnostics is true.')
param infraKeyVaultLogsRetentionDays int

// ==================================== Resource Locks switches ====================================

@description('Enable Resource Lock on Flow Logs resources.')
param flowLogsEnableLock bool
@description('Enable Resource Lock on monitoring data Storage Account.')
param monitoringDataStorageEnableLock bool
@description('Enable Resource Lock on monitoring Workspace.')
param monitoringWorkspaceEnableLock bool
@description('Enable Resource Lock on infrastructure Key Vault.')
param infraKeyVaultEnableLock bool

// ==================================== PaaS Firewall settings ====================================

@description('Enable public access in the PaaS firewall.')
param monitoringDataStorageEnablePublicAccess bool
@description('Allow bypass of PaaS firewall rules to Azure Services.')
param monitoringDataStorageBypassAzureServices bool
@description('List of Subnets allowed to access the Storage Account in the PaaS firewall.')
@metadata({
  vnetName: 'Name of VNet.'
  subnetName: 'Name of the Subnet.'
})
param monitoringDataStorageAllowedSubnets array
@description('List of IPs or CIDRs allowed to access the Storage Account in the PaaS firewall.')
param monitoringDataStorageAllowedIPsOrCIDRs array

@description('Enable public access in the PaaS firewall.')
param infraKeyVaultEnablePublicAccess bool
@description('Allow bypass of PaaS firewall rules to Azure Services.')
param infraKeyVaultBypassAzureServices bool
@description('List of Subnets allowed to access the Storage Account in the PaaS firewall.')
@metadata({
  vnetName: 'Name of VNet.'
  subnetName: 'Name of the Subnet.'
})
param infraKeyVaultAllowedSubnets array
@description('List of IPs or CIDRs allowed to access the Storage Account in the PaaS firewall.')
param infraKeyVaultAllowedIPsOrCIDRs array

// ==================================== Module switches ====================================

@description('Create or update Private Endpoint modules.')
param enablePrivateEndpointModules bool

@description('Create or update Flow Logs module.')
param enableFlowLogsModule bool

@description('Create or update Service Endpoints Policies module.')
param enableServiceEndpointPoliciesModule bool

// ==================================== Resources ====================================

module usersRbacModule 'modules/users-rbac.bicep' = {
  name: 'users-rbac-module'
  params: {
    adminUsersPrincipalIds: adminUsersPrincipalIds
    devUsersPrincipalIds: devUsersPrincipalIds
  }
}

module managedIdentitiesModule 'modules/managed-identities.bicep' = {
  name: 'managed-identities-module'
  params: {
    location: location
    env: env
    standardTags: standardTags
  }
}

module managedIdentitiesRbacModule 'modules/managed-identities-rbac.bicep' = {
  name: 'managed-identities-rbac-module'
  params: {
    aksManagedIdentityPrincipalId: managedIdentitiesModule.outputs.aksManagedIdentityPrincipalId
    app1ManagedIdentityPrincipalId: managedIdentitiesModule.outputs.app1ManagedIdentityPrincipalId
  }
}

var linkedVNetNamesForPrivateEndpoints = [
  gatewayVNetName
  appsVNetName
  endpointsVNetName
  jumpServersVNetName
  devopsAgentsVNetName
]

module monitoringStorageAccountModule 'modules/monitoring-storage-account.bicep' = {
  name: 'monitoring-storage-account-module'
  params: {
    location: location
    env: env
    standardTags: standardTags
    storageAccountNameSuffix: monitoringDataStorageNameSuffix
    storageAccountSkuName: monitoringDataStorageSkuName
    enableLock: monitoringDataStorageEnableLock
    enablePublicAccess: monitoringDataStorageEnablePublicAccess
    bypassAzureServices: monitoringDataStorageBypassAzureServices
    allowedSubnets: monitoringDataStorageAllowedSubnets
    allowedIPsOrCIDRs: monitoringDataStorageAllowedIPsOrCIDRs
  }
}

module monitoringStorageAccountContainersModule 'modules/monitoring-storage-account-containers.bicep' = {
  name: 'monitoring-storage-account-containers-module'
  params: {
    monitoringDataStorageAccountName: monitoringStorageAccountModule.outputs.storageAccountName
  }
}

module monitoringLogAnalyticsWorkspaceModule 'modules/monitoring-loganalytics-workspace.bicep' = {
  name: 'monitoring-loganalytics-workspace-module'
  params: {
    location: location
    env: env
    standardTags: standardTags
    workspaceSkuName: monitoringWorkspaceSkuName
    workspaceCapacityReservation: monitoringWorkspaceCapacityReservation
    logRetentionDays: monitoringWorkspaceLogRetentionDays
    linkedStorageAccountName: monitoringStorageAccountModule.outputs.storageAccountName
    enableLock: monitoringWorkspaceEnableLock
  }
}

module keyVaultModule 'modules/keyvault.bicep' = {
  name: 'keyvault-module'
  params: {
    location: location
    env: env
    standardTags: standardTags
    keyVaultNameSuffix: infraKeyVaultNameSuffix
    enablePurgeProtection: infraKeyVaultEnablePurgeProtection
    softDeleteRetentionDays: infraKeyVaultSoftDeleteRetentionDays
    enableArmAccess: infraKeyVaultEnableArmAccess
    enableRbacAuthorization: infraKeyVaultEnableRbacAuthorization
    enableDiagnostics: infraKeyVaultEnableDiagnostics
    diagnosticsWorkspaceName: monitoringLogAnalyticsWorkspaceModule.outputs.workspaceName
    logsRetentionDays: infraKeyVaultLogsRetentionDays
    enableLock: infraKeyVaultEnableLock
    enablePublicAccess: infraKeyVaultEnablePublicAccess
    bypassAzureServices: infraKeyVaultBypassAzureServices
    allowedSubnets: infraKeyVaultAllowedSubnets
    allowedIPsOrCIDRs: infraKeyVaultAllowedIPsOrCIDRs
  }
}

module keyVaultPrivateEndpointModule 'modules/private-endpoint.bicep' = if (enablePrivateEndpointModules) {
  name: 'keyvault-private-endpoint-module'
  params: {
    location: location
    env: env
    standardTags: standardTags
    privateEndpointName: 'PE02'
    vnetName: endpointsVNetName
    subnetName: endpointsSubnetName
    privateIPAddresses: [ infraKeyVaultPEPrivateIPAddress ]
    serviceId: keyVaultModule.outputs.keyVaultId
    groupId: 'vault'
    linkedVNetNames: linkedVNetNamesForPrivateEndpoints
  }
}

module keyVaultObjectsModule 'modules/keyvault-objects.bicep' = {
  name: 'keyvault-objects-module'
  params: {
    location: location
    keyVaultName: keyVaultModule.outputs.keyVaultName
    createEncryptionKeys: createEncryptionKeysInKeyVault
    appsDataStorageEncryptionKeyName: 'crececonsdx-appsdatastorage-key'
    encryptionKeysIssueDateTime: encryptionKeysIssueDateTime
    createSecrets: createSecretsInKeyVault
    enableRandomPasswordsGeneration: enableRandomPasswordGenerationForSecrets
    sqlDatabaseSqlAdminNameSecretName: 'crececonsdx-sqldatabase-sqladminloginname'
    sqlDatabaseSqlAdminNameSecretValue: secrtsSqlDatabaseSqlAdminLoginName
    sqlDatabaseSqlAdminPassSecretName: 'crececonsdx-sqldatabase-sqladminloginpass'
    sqlDatabaseSqlAdminPassSecretValue: secrtsSqlDatabaseSqlAdminLoginPass
    secrtsIssueDateTime: secrtsIssueDateTime
  }
}

var devopsAgentPrincipalIdList = (devopsAgentPrincipalId == '') ? [] : [ devopsAgentPrincipalId ]
var infraKeyVaultAdminsPrincipalIds = concat(adminUsersPrincipalIds, azureServicesPrincipalIds, devopsAgentPrincipalIdList)

module keyVaultPoliciesModule 'modules/keyvault-policies.bicep' = {
  name: 'keyvault-policies-module'
  params: {
    infraKeyVaultName: keyVaultModule.outputs.keyVaultName
    appGatewayPrincipalId: managedIdentitiesModule.outputs.appGatewayManagedIdentityPrincipalId
    appsDataStorageAccountPrincipalId: managedIdentitiesModule.outputs.appsDataStorageManagedIdentityPrincipalId
    adminsPrincipalIds: infraKeyVaultAdminsPrincipalIds
    readersPrincipalIds: [
      managedIdentitiesModule.outputs.app1ManagedIdentityPrincipalId
    ]
  }
}

module keyVaultRbacModule 'modules/keyvault-rbac.bicep' = {
  name: 'keyvault-rbac-module'
  params: {
    infraKeyVaultName: keyVaultModule.outputs.keyVaultName
    appGatewayManagedIdentityPrincipalId: managedIdentitiesModule.outputs.appGatewayManagedIdentityPrincipalId
    appsDataStorageManagedIdentityPrincipalId: managedIdentitiesModule.outputs.appsDataStorageManagedIdentityPrincipalId
  }
}

module flowLogsNsgModule 'modules/flowlogs-nsg.bicep' = {
  name: 'flowlogs-nsg-module'
  params: {
    flowLogsTargetNSGName: appsNSGName
  }
}

module flowLogsModule 'modules/flowlogs.bicep' = if (enableFlowLogsModule) {
  name: 'flowlogs-module'
  scope: resourceGroup('NetworkWatcherRG')
  params: {
    location: location
    env: env
    standardTags: standardTags
    flowLogsTargetNSGId: flowLogsNsgModule.outputs.flowLogsTargetNSGId
    flowLogsStorageAccountId: monitoringStorageAccountModule.outputs.storageAccountId
    enableNetworkWatcherFlowAnalytics: flowLogsEnableNetworkWatcherFlowAnalytics
    flowAnalyticsWorkspaceId: monitoringLogAnalyticsWorkspaceModule.outputs.workspaceId
    flowLogsRetentionDays: flowLogsRetentionDays
    enableLock: flowLogsEnableLock
  }
}

module serviceEndpointPoliciesModule 'modules/service-endpoint-policies.bicep' = if (enableServiceEndpointPoliciesModule) {
  name: 'service-endpoint-policies-module'
  params: {
    location: location
    env: env
    standardTags: standardTags
    infraKeyVaultId: keyVaultModule.outputs.keyVaultId
    monitoringDataStorageAccountId: monitoringStorageAccountModule.outputs.storageAccountId
  }
}
